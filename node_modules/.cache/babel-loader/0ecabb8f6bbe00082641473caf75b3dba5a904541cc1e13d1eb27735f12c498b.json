{"ast":null,"code":"import React,{useState}from'react';import{Connection,PublicKey,clusterApiUrl,Keypair,Transaction,SystemProgram}from'@solana/web3.js';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const PROGRAM_ID=new PublicKey(process.env.REACT_APP_PROGRAM_ID);const NETWORK=clusterApiUrl('testnet');function App(){const[message,setMessage]=useState('');const interactWithBot=async()=>{const connection=new Connection(NETWORK,'confirmed');const payer=Keypair.generate();const transaction=new Transaction().add(SystemProgram.transfer({fromPubkey:payer.publicKey,toPubkey:PROGRAM_ID,lamports:1000}));const signature=await connection.sendTransaction(transaction,[payer]);await connection.confirmTransaction(signature);setMessage('Transaction successful with signature: '+signature);};return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsxs(\"header\",{className:\"App-header\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:interactWithBot,children:\"Interact with Bot\"}),/*#__PURE__*/_jsx(\"p\",{children:message})]})});}export default App;","map":{"version":3,"names":["React","useState","Connection","PublicKey","clusterApiUrl","Keypair","Transaction","SystemProgram","jsx","_jsx","jsxs","_jsxs","PROGRAM_ID","process","env","REACT_APP_PROGRAM_ID","NETWORK","App","message","setMessage","interactWithBot","connection","payer","generate","transaction","add","transfer","fromPubkey","publicKey","toPubkey","lamports","signature","sendTransaction","confirmTransaction","className","children","onClick"],"sources":["C:/solana-bot/bot/client/solana-bot-ui/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n    Connection,\n    PublicKey,\n    clusterApiUrl,\n    Keypair,\n    Transaction,\n    SystemProgram,\n} from '@solana/web3.js';\n\nconst PROGRAM_ID = new PublicKey(process.env.REACT_APP_PROGRAM_ID);\nconst NETWORK = clusterApiUrl('testnet');\n\nfunction App() {\n    const [message, setMessage] = useState('');\n\n    const interactWithBot = async () => {\n        const connection = new Connection(NETWORK, 'confirmed');\n        const payer = Keypair.generate();\n\n        const transaction = new Transaction().add(\n            SystemProgram.transfer({\n                fromPubkey: payer.publicKey,\n                toPubkey: PROGRAM_ID,\n                lamports: 1000,\n            })\n        );\n\n        const signature = await connection.sendTransaction(transaction, [payer]);\n\n        await connection.confirmTransaction(signature);\n\n        setMessage('Transaction successful with signature: ' + signature);\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <button onClick={interactWithBot}>Interact with Bot</button>\n                <p>{message}</p>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OACIC,UAAU,CACVC,SAAS,CACTC,aAAa,CACbC,OAAO,CACPC,WAAW,CACXC,aAAa,KACV,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEzB,KAAM,CAAAC,UAAU,CAAG,GAAI,CAAAT,SAAS,CAACU,OAAO,CAACC,GAAG,CAACC,oBAAoB,CAAC,CAClE,KAAM,CAAAC,OAAO,CAAGZ,aAAa,CAAC,SAAS,CAAC,CAExC,QAAS,CAAAa,GAAGA,CAAA,CAAG,CACX,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGlB,QAAQ,CAAC,EAAE,CAAC,CAE1C,KAAM,CAAAmB,eAAe,CAAG,KAAAA,CAAA,GAAY,CAChC,KAAM,CAAAC,UAAU,CAAG,GAAI,CAAAnB,UAAU,CAACc,OAAO,CAAE,WAAW,CAAC,CACvD,KAAM,CAAAM,KAAK,CAAGjB,OAAO,CAACkB,QAAQ,CAAC,CAAC,CAEhC,KAAM,CAAAC,WAAW,CAAG,GAAI,CAAAlB,WAAW,CAAC,CAAC,CAACmB,GAAG,CACrClB,aAAa,CAACmB,QAAQ,CAAC,CACnBC,UAAU,CAAEL,KAAK,CAACM,SAAS,CAC3BC,QAAQ,CAAEjB,UAAU,CACpBkB,QAAQ,CAAE,IACd,CAAC,CACL,CAAC,CAED,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAV,UAAU,CAACW,eAAe,CAACR,WAAW,CAAE,CAACF,KAAK,CAAC,CAAC,CAExE,KAAM,CAAAD,UAAU,CAACY,kBAAkB,CAACF,SAAS,CAAC,CAE9CZ,UAAU,CAAC,yCAAyC,CAAGY,SAAS,CAAC,CACrE,CAAC,CAED,mBACItB,IAAA,QAAKyB,SAAS,CAAC,KAAK,CAAAC,QAAA,cAChBxB,KAAA,WAAQuB,SAAS,CAAC,YAAY,CAAAC,QAAA,eAC1B1B,IAAA,WAAQ2B,OAAO,CAAEhB,eAAgB,CAAAe,QAAA,CAAC,mBAAiB,CAAQ,CAAC,cAC5D1B,IAAA,MAAA0B,QAAA,CAAIjB,OAAO,CAAI,CAAC,EACZ,CAAC,CACR,CAAC,CAEd,CAEA,cAAe,CAAAD,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}