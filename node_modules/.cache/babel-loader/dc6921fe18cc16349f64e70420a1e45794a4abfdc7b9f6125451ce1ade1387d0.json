{"ast":null,"code":"var _jsxFileName = \"C:\\\\solana-bot\\\\bot\\\\client\\\\solana-bot-ui\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Connection, PublicKey, clusterApiUrl, Keypair, Transaction, SystemProgram, LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PROGRAM_ID = process.env.REACT_APP_PROGRAM_ID ? new PublicKey(process.env.REACT_APP_PROGRAM_ID) : null;\nconst NETWORK = clusterApiUrl('testnet');\nfunction App() {\n  _s();\n  const [message, setMessage] = useState('');\n  const interactWithBot = async () => {\n    try {\n      if (!PROGRAM_ID) {\n        setMessage('PROGRAM_ID is not defined');\n        console.error('PROGRAM_ID is not defined');\n        return;\n      }\n      const connection = new Connection(NETWORK, 'confirmed');\n      const payer = Keypair.generate();\n\n      // Airdrop SOL to the payer\n      console.log('Requesting airdrop...');\n      const airdropSignature = await connection.requestAirdrop(payer.publicKey, LAMPORTS_PER_SOL);\n      await connection.confirmTransaction(airdropSignature);\n      console.log('Airdrop successful, signature:', airdropSignature);\n      const transaction = new Transaction().add(SystemProgram.transfer({\n        fromPubkey: payer.publicKey,\n        toPubkey: PROGRAM_ID,\n        lamports: 1000\n      }));\n      console.log('Sending transaction...');\n      const signature = await connection.sendTransaction(transaction, [payer]);\n      await connection.confirmTransaction(signature);\n      console.log('Transaction confirmed, signature:', signature);\n      setMessage('Transaction successful with signature: ' + signature);\n    } catch (error) {\n      console.error('Error interacting with bot:', error);\n      setMessage('Error interacting with bot: ' + error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: interactWithBot,\n        children: \"Interact with Bot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"l8KXAebGu4sZHsyCIQX7P8si41w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Connection","PublicKey","clusterApiUrl","Keypair","Transaction","SystemProgram","LAMPORTS_PER_SOL","jsxDEV","_jsxDEV","PROGRAM_ID","process","env","REACT_APP_PROGRAM_ID","NETWORK","App","_s","message","setMessage","interactWithBot","console","error","connection","payer","generate","log","airdropSignature","requestAirdrop","publicKey","confirmTransaction","transaction","add","transfer","fromPubkey","toPubkey","lamports","signature","sendTransaction","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/solana-bot/bot/client/solana-bot-ui/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n    Connection,\n    PublicKey,\n    clusterApiUrl,\n    Keypair,\n    Transaction,\n    SystemProgram,\n    LAMPORTS_PER_SOL,\n} from '@solana/web3.js';\n\nconst PROGRAM_ID = process.env.REACT_APP_PROGRAM_ID ? new PublicKey(process.env.REACT_APP_PROGRAM_ID) : null;\nconst NETWORK = clusterApiUrl('testnet');\n\nfunction App() {\n    const [message, setMessage] = useState('');\n\n    const interactWithBot = async () => {\n        try {\n            if (!PROGRAM_ID) {\n                setMessage('PROGRAM_ID is not defined');\n                console.error('PROGRAM_ID is not defined');\n                return;\n            }\n\n            const connection = new Connection(NETWORK, 'confirmed');\n            const payer = Keypair.generate();\n\n            // Airdrop SOL to the payer\n            console.log('Requesting airdrop...');\n            const airdropSignature = await connection.requestAirdrop(\n                payer.publicKey,\n                LAMPORTS_PER_SOL,\n            );\n\n            await connection.confirmTransaction(airdropSignature);\n            console.log('Airdrop successful, signature:', airdropSignature);\n\n            const transaction = new Transaction().add(\n                SystemProgram.transfer({\n                    fromPubkey: payer.publicKey,\n                    toPubkey: PROGRAM_ID,\n                    lamports: 1000,\n                })\n            );\n\n            console.log('Sending transaction...');\n            const signature = await connection.sendTransaction(transaction, [payer]);\n\n            await connection.confirmTransaction(signature);\n            console.log('Transaction confirmed, signature:', signature);\n\n            setMessage('Transaction successful with signature: ' + signature);\n        } catch (error) {\n            console.error('Error interacting with bot:', error);\n            setMessage('Error interacting with bot: ' + error.message);\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <button onClick={interactWithBot}>Interact with Bot</button>\n                <p>{message}</p>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}