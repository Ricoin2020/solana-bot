{"ast":null,"code":"var _jsxFileName = \"C:\\\\solana-bot\\\\bot\\\\client\\\\solana-bot-ui\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Connection, PublicKey, clusterApiUrl, Keypair, Transaction, SystemProgram } from '@solana/web3.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PROGRAM_ID = new PublicKey(process.env.REACT_APP_PROGRAM_ID);\nconst NETWORK = clusterApiUrl('testnet');\nfunction App() {\n  _s();\n  const [message, setMessage] = useState('');\n  const interactWithBot = async () => {\n    const connection = new Connection(NETWORK, 'confirmed');\n    const payer = Keypair.generate();\n    const transaction = new Transaction().add(SystemProgram.transfer({\n      fromPubkey: payer.publicKey,\n      toPubkey: PROGRAM_ID,\n      lamports: 1000\n    }));\n    const signature = await connection.sendTransaction(transaction, [payer]);\n    await connection.confirmTransaction(signature);\n    setMessage('Transaction successful with signature: ' + signature);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: interactWithBot,\n        children: \"Interact with Bot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"l8KXAebGu4sZHsyCIQX7P8si41w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Connection","PublicKey","clusterApiUrl","Keypair","Transaction","SystemProgram","jsxDEV","_jsxDEV","PROGRAM_ID","process","env","REACT_APP_PROGRAM_ID","NETWORK","App","_s","message","setMessage","interactWithBot","connection","payer","generate","transaction","add","transfer","fromPubkey","publicKey","toPubkey","lamports","signature","sendTransaction","confirmTransaction","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/solana-bot/bot/client/solana-bot-ui/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n    Connection,\n    PublicKey,\n    clusterApiUrl,\n    Keypair,\n    Transaction,\n    SystemProgram,\n} from '@solana/web3.js';\n\nconst PROGRAM_ID = new PublicKey(process.env.REACT_APP_PROGRAM_ID);\nconst NETWORK = clusterApiUrl('testnet');\n\nfunction App() {\n    const [message, setMessage] = useState('');\n\n    const interactWithBot = async () => {\n        const connection = new Connection(NETWORK, 'confirmed');\n        const payer = Keypair.generate();\n\n        const transaction = new Transaction().add(\n            SystemProgram.transfer({\n                fromPubkey: payer.publicKey,\n                toPubkey: PROGRAM_ID,\n                lamports: 1000,\n            })\n        );\n\n        const signature = await connection.sendTransaction(transaction, [payer]);\n\n        await connection.confirmTransaction(signature);\n\n        setMessage('Transaction successful with signature: ' + signature);\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <button onClick={interactWithBot}>Interact with Bot</button>\n                <p>{message}</p>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SACIC,UAAU,EACVC,SAAS,EACTC,aAAa,EACbC,OAAO,EACPC,WAAW,EACXC,aAAa,QACV,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,UAAU,GAAG,IAAIP,SAAS,CAACQ,OAAO,CAACC,GAAG,CAACC,oBAAoB,CAAC;AAClE,MAAMC,OAAO,GAAGV,aAAa,CAAC,SAAS,CAAC;AAExC,SAASW,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMkB,eAAe,GAAG,MAAAA,CAAA,KAAY;IAChC,MAAMC,UAAU,GAAG,IAAIlB,UAAU,CAACY,OAAO,EAAE,WAAW,CAAC;IACvD,MAAMO,KAAK,GAAGhB,OAAO,CAACiB,QAAQ,CAAC,CAAC;IAEhC,MAAMC,WAAW,GAAG,IAAIjB,WAAW,CAAC,CAAC,CAACkB,GAAG,CACrCjB,aAAa,CAACkB,QAAQ,CAAC;MACnBC,UAAU,EAAEL,KAAK,CAACM,SAAS;MAC3BC,QAAQ,EAAElB,UAAU;MACpBmB,QAAQ,EAAE;IACd,CAAC,CACL,CAAC;IAED,MAAMC,SAAS,GAAG,MAAMV,UAAU,CAACW,eAAe,CAACR,WAAW,EAAE,CAACF,KAAK,CAAC,CAAC;IAExE,MAAMD,UAAU,CAACY,kBAAkB,CAACF,SAAS,CAAC;IAE9CZ,UAAU,CAAC,yCAAyC,GAAGY,SAAS,CAAC;EACrE,CAAC;EAED,oBACIrB,OAAA;IAAKwB,SAAS,EAAC,KAAK;IAAAC,QAAA,eAChBzB,OAAA;MAAQwB,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC1BzB,OAAA;QAAQ0B,OAAO,EAAEhB,eAAgB;QAAAe,QAAA,EAAC;MAAiB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC5D9B,OAAA;QAAAyB,QAAA,EAAIjB;MAAO;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd;AAACvB,EAAA,CA9BQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAgCZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}